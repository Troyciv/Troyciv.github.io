<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://troyciv.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://troyciv.github.io/" rel="alternate" type="text/html" /><updated>2018-07-06T13:58:56+02:00</updated><id>https://troyciv.github.io/</id><title type="html">Troyka</title><subtitle></subtitle><author><name>Troyciv</name></author><entry><title type="html">The fundamental principle of Anki card creation</title><link href="https://troyciv.github.io/anki/2018/07/04/anki-fundamentals.html" rel="alternate" type="text/html" title="The fundamental principle of Anki card creation" /><published>2018-07-04T00:00:00+02:00</published><updated>2018-07-04T00:00:00+02:00</updated><id>https://troyciv.github.io/anki/2018/07/04/anki-fundamentals</id><content type="html" xml:base="https://troyciv.github.io/anki/2018/07/04/anki-fundamentals.html">&lt;p&gt;During the last weeks I’ve been a little more active on the &lt;a href=&quot;https://www.reddit.com/r/anki&quot;&gt;Anki subreddit&lt;/a&gt; than usual.
One thing I noticed was that some new users have difficulties to grasp how Anki actually creates cards.
While I do think that the &lt;a href=&quot;https://apps.ankiweb.net/docs/manual.html&quot;&gt;official Anki docs&lt;/a&gt; are excellently written, I also understand that a technical documentation can be a little bit overwhelming at times.
This is why I’ve written this short article in order to clear up some of the confusion.&lt;/p&gt;

&lt;!-- ![Anki card creation flowchart](/assets/img/anki-flowchart-3.svg) --&gt;
&lt;center&gt;
&lt;!-- &lt;img src=&quot;/assets/img/anki-flowchart-3.svg&quot; onerror=&quot;this.src='/assets/img/anki-flowchart-1.png'&quot;&gt; --&gt;
&lt;img src=&quot;/assets/img/anki-flowchart-4.svg&quot; onerror=&quot;this.src='/assets/img/anki-flowchart-4.png'&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
The graphic above shows the whole process of card creation.
In Anki, you don’t create cards yourself but Anki creates them automatically based on the &lt;strong&gt;notes&lt;/strong&gt; and the &lt;strong&gt;templates&lt;/strong&gt; you give it.&lt;/p&gt;

&lt;p&gt;Let’s go through it step by step.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;note&lt;/strong&gt; is a collection of &lt;strong&gt;fields&lt;/strong&gt;.
Simply put, this is where you put all the relevant information you want to create card(s) from.
A Note can consist of an arbitrary number of &lt;strong&gt;fields&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;field&lt;/strong&gt; can contain text or links to images, videos and other files (e.g. audio files).
Internally anki stores everything in a field as html.
For ease of use Anki renders the html in the field directly and hides the html code.
Very similar to your web browser that displays the rendered html code of a website.
If you want to see the actual html that is stored inside a field simply press &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ctrl-shift-x&amp;gt;&lt;/code&gt; when your cursor is inside a field. This can be very helpful for debugging purposes.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;note type&lt;/strong&gt; defines:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;number of &lt;strong&gt;fields&lt;/strong&gt; per note&lt;/li&gt;
  &lt;li&gt;number of &lt;strong&gt;cards&lt;/strong&gt; that should get created form each note&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;card template&lt;/strong&gt;, those define how each card should look like&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;card templates&lt;/strong&gt; are written in html and css.
If you want to change the looks of your cards or you want to display a different field on your cards, this is the place to go.&lt;/p&gt;

&lt;p&gt;The advantage of this approach is that you separate content from layout.
You can create multiple different cards from the same note.
No need to type the same information multiple times.&lt;/p&gt;

&lt;p&gt;The simplest example of this are forward and backward cards.
Your note type contains one field with a word in your mother tongue and another field with the word in your target language.
In your note type you define two cards, one that goes L1-&amp;gt;L2 and a second that goes L2-&amp;gt;L1.&lt;/p&gt;

&lt;p&gt;You can have multiple note types for different use cases and it’s often recommended to have more than one.
For example, as a language learner, I have dedicated note types for picture cards, audio listening cards, cloze deletions and verb conjugations and a few more. Some have only one card template, others have several.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;cards&lt;/strong&gt; themselves are nothing more than tiny web pages build from html, css and (if needed) javascript.
This is why it can only be beneficial to learn the very basics of html and css when you want to design you own cards.
Don’t worry you don’t need to be a web developer, just get an idea of the basic principles.
As you can see in the graphic, each card template has its own html markup (actually there are two, one for the front, one for the back) and all card templates share the same css file.&lt;/p&gt;

&lt;p&gt;Let’s put this all together:&lt;/p&gt;

&lt;p&gt;Every time you add a new &lt;strong&gt;note&lt;/strong&gt; to Anki, it creates the &lt;strong&gt;cards&lt;/strong&gt; automatically using the &lt;strong&gt;note&lt;/strong&gt; as well as the &lt;strong&gt;card templates&lt;/strong&gt; defined in the &lt;strong&gt;note type&lt;/strong&gt;.
Note that you &lt;em&gt;add notes&lt;/em&gt; but never &lt;em&gt;cards&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That’s it.
Quite a lot of special special lingo, I know.
But once you understand this core principle, creating your own note types and design your own card templates will be much easier.&lt;/p&gt;</content><author><name>Troyciv</name></author><category term="Anki" /><category term="learn" /><category term="language" /><summary type="html">During the last weeks I’ve been a little more active on the Anki subreddit than usual. One thing I noticed was that some new users have difficulties to grasp how Anki actually creates cards. While I do think that the official Anki docs are excellently written, I also understand that a technical documentation can be a little bit overwhelming at times. This is why I’ve written this short article in order to clear up some of the confusion.</summary></entry><entry><title type="html">Setting up a static website with Jekyll</title><link href="https://troyciv.github.io/jekyll/linux/2017/12/01/setting-up-a-static-website-with-jekyll.html" rel="alternate" type="text/html" title="Setting up a static website with Jekyll" /><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><id>https://troyciv.github.io/jekyll/linux/2017/12/01/setting-up-a-static-website-with-jekyll</id><content type="html" xml:base="https://troyciv.github.io/jekyll/linux/2017/12/01/setting-up-a-static-website-with-jekyll.html">&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is the most popular static web-page generator out there.
It takes your content, written in markdown, some config-files and creates html and css files.
No database, no other bs. Clean and simple.&lt;/p&gt;

&lt;p&gt;This is a short tutorial on how to get it up and running.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;First we need to install ruby, the programming language jekyll is built upon.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby ruby-dev rubygem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rubygem, or simply gem, is a packet manager for ruby, similar to apt for debian based linux distributions or pip for python packages.&lt;/p&gt;

&lt;p&gt;Now we want to allow us, the non-privileged user, to install ruby gems without sudo. Therefore we set gem to &lt;code class=&quot;highlighter-rouge&quot;&gt;--user-install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem: --user-install&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.gemrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also have to make sure to add the gem binary directory to our PATH. Add this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.profile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.gem/ruby/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to avoid logging out and in again we source the &lt;code class=&quot;highlighter-rouge&quot;&gt;.profile&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can install jekyll with its dependencies&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bundler is another package manager that takes care and satisfies eventual dependencies in our projects.&lt;/p&gt;

&lt;p&gt;Because Bundler might want to install some gems as dependencies we have to adjust the default installation directory for bundler similar to the rubygem configuration.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GEM_HOME=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.gem&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bash-profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever you use gem or bundler to install ruby gems it should install them in ~/.gem from now on.
If one of them still asks you for sudo rights something went wrong.&lt;/p&gt;

&lt;p&gt;You can check your current jekyll version with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update jekyll with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundler update jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-a-new-project&quot;&gt;Create a new project&lt;/h3&gt;

&lt;p&gt;Finally, everything is installed and configured.
Time to create your new website.&lt;/p&gt;

&lt;p&gt;Create a new project with&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new my-new-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change into the new directory and build the website for test purposes&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-new-project
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;open your browser and go to&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations you’ve successfully set up your first static webpage with jekyll.&lt;/p&gt;

&lt;p&gt;Of course this is not the end of it.
In the next post I will explain how to create a new post for your brand new blog. See you there.&lt;/p&gt;</content><author><name>Troyciv</name></author><summary type="html">Jekyll is the most popular static web-page generator out there. It takes your content, written in markdown, some config-files and creates html and css files. No database, no other bs. Clean and simple.</summary></entry></feed>